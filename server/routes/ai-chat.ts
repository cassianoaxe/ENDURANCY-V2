import { Router, Request, Response } from 'express';
import OpenAI from 'openai';
import { db } from '../db';
import { eq, and } from 'drizzle-orm';
import { plans, planModules, modules, organizations } from '@shared/schema';

const router = Router();

interface AuthenticatedRequest extends Request {
  user?: {
    id: number;
    username: string;
    role: string;
    organizationId?: number;
  };
}

// Middleware para autentica√ß√£o
function authenticate(req: AuthenticatedRequest, res: Response, next: Function) {
  if (req.session && req.session.user) {
    // Se temos o objeto user na sess√£o, ent√£o o usu√°rio est√° autenticado
    return next();
  }
  return res.status(401).json({ message: 'N√£o autenticado' });
}

// Middleware para verificar acesso ao m√≥dulo de IA
async function checkAIModuleAccess(req: AuthenticatedRequest, res: Response, next: Function) {
  try {
    if (!req.session || !req.session.user || !req.session.user.organizationId) {
      return res.status(403).json({ message: 'Acesso negado ao m√≥dulo de IA' });
    }

    // Atribuir o usu√°rio da sess√£o ao req.user para usar no resto do c√≥digo
    req.user = req.session.user;

    // Durante o per√≠odo beta, permitir acesso a todas as organiza√ß√µes
    const BETA_ACCESS_ENABLED = true;
    
    if (BETA_ACCESS_ENABLED) {
      console.log(`[BETA] Concedendo acesso ao Copilot para a organiza√ß√£o ID ${req.user.organizationId} - Per√≠odo beta`);
      return next();
    }
    
    // Se n√£o estiver no per√≠odo beta, verificar se a organiza√ß√£o tem acesso ao m√≥dulo de IA
    const organizationId = req.user.organizationId;
    
    // Buscar o plano atual da organiza√ß√£o
    const organization = await db.query.organizations.findFirst({
      where: eq(organizations.id, organizationId),
      columns: {
        planId: true
      }
    });

    if (!organization || !organization.planId) {
      return res.status(403).json({ message: 'Organiza√ß√£o sem plano ativo' });
    }

    // Verificar se o plano inclui o m√≥dulo de IA
    const moduleAccess = await db.query.planModules.findFirst({
      where: (planModules, { and, eq }) => and(
        eq(planModules.planId, organization.planId),
        eq(planModules.moduleId, 19) // ID do m√≥dulo de IA
      )
    });

    if (!moduleAccess) {
      return res.status(403).json({ 
        message: 'Seu plano atual n√£o inclui acesso ao m√≥dulo de Intelig√™ncia Artificial' 
      });
    }

    next();
  } catch (error) {
    console.error('Erro ao verificar acesso ao m√≥dulo de IA:', error);
    return res.status(500).json({ message: 'Erro ao verificar permiss√µes' });
  }
}

// Verifica√ß√£o da API Key
const openaiApiKey = process.env.OPENAI_API_KEY;
console.log("OpenAI API Key configurada:", openaiApiKey ? "Sim" : "N√£o");
if (!openaiApiKey) {
  console.error("AVISO: OPENAI_API_KEY n√£o est√° configurada. A API do OpenAI n√£o funcionar√°.");
}

// Configura√ß√£o da API do OpenAI
const openai = new OpenAI({
  apiKey: openaiApiKey,
});

// Fun√ß√£o auxiliar para logs detalhados
function logDetailedError(title: string, error: any) {
  console.error(`===== ${title} =====`);
  console.error('Message:', error.message);
  console.error('Name:', error.name);
  if (error.response) {
    console.error('Response status:', error.response.status);
    console.error('Response data:', error.response.data);
  }
  console.error('Full error:', error);
  console.error('========================');
}

// Fun√ß√£o para processar comandos espec√≠ficos
async function processCommand(commandType: string, userContext: any): Promise<string> {
  switch (commandType) {
    case 'criar_paciente':
      return `Para criar um novo paciente, vou ajud√°-lo com o processo:

1Ô∏è‚É£ Acesse o m√≥dulo "Pacientes" no menu lateral
2Ô∏è‚É£ Clique no bot√£o "+ Novo Paciente" no canto superior direito
3Ô∏è‚É£ Preencha os dados cadastrais obrigat√≥rios:
   ‚Ä¢ Nome completo
   ‚Ä¢ Data de nascimento
   ‚Ä¢ CPF
   ‚Ä¢ Contato (e-mail e telefone)

Se desejar, posso abrir o formul√°rio de cria√ß√£o para voc√™ automaticamente. Gostaria que eu fizesse isso?`;

    case 'buscar_paciente':
      return `Para buscar um paciente, voc√™ tem v√°rias op√ß√µes:

1Ô∏è‚É£ Pesquisa por nome: Digite o nome completo ou parcial
2Ô∏è‚É£ Pesquisa por CPF: Digite o CPF sem pontua√ß√£o
3Ô∏è‚É£ Pesquisa por ID: Se souber o c√≥digo do paciente

Voc√™ pode encontrar a barra de pesquisa no topo da p√°gina de listagem de pacientes. 
Por favor, informe qual paciente voc√™ est√° procurando, e posso ajudar a localiz√°-lo.`;

    case 'analise_vendas':
      return `üîç **An√°lise de Vendas** (√∫ltimos 30 dias)

üìà **Vis√£o Geral:**
‚Ä¢ Total de vendas: R$ 32.450,75
‚Ä¢ Crescimento: +12.5% (comparado ao per√≠odo anterior)
‚Ä¢ Ticket m√©dio: R$ 235,60 (+5.2%)

üîù **Produtos mais vendidos:**
1. CBD Oil 10% (350 unidades)
2. Tincture Full Spectrum (275 unidades)
3. C√°psulas CBD Isolate (210 unidades)

üéØ **Oportunidades identificadas:**
‚Ä¢ Produtos na categoria "T√≥picos" tiveram um crescimento de 22%
‚Ä¢ Vendas online aumentaram 15.3% enquanto as presenciais cresceram apenas 3.1%

Gostaria de analisar algum aspecto espec√≠fico das vendas?`;

    default:
      return "Desculpe, n√£o foi poss√≠vel processar este comando espec√≠fico. Como posso ajudar voc√™ de outra forma?";
  }
}

// Rota de chat com o assistente de IA
router.post('/chat', authenticate, checkAIModuleAccess, async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { message, isCommand, commandType } = req.body;
    
    if (!message) {
      return res.status(400).json({ message: 'Mensagem n√£o fornecida' });
    }
    
    console.log(`Processando mensagem do usu√°rio: "${message.substring(0, 50)}${message.length > 50 ? '...' : ''}"`);
    
    const userContext = {
      organizationId: req.user?.organizationId,
      username: req.user?.username,
      role: req.user?.role
    };
    
    // Verificar se √© um comando especial
    if (isCommand && commandType) {
      try {
        const commandResponse = await processCommand(commandType, userContext);
        return res.json({
          success: true,
          response: commandResponse,
          isCommandResponse: true,
          commandType: commandType
        });
      } catch (commandError) {
        console.error('Erro ao processar comando:', commandError);
        return res.json({
          success: false,
          response: "N√£o foi poss√≠vel processar este comando. Por favor, tente novamente mais tarde.",
          isCommandResponse: true
        });
      }
    }
    
    // Verificar se a mensagem cont√©m palavras-chave para comandos
    const containsPatientCreate = message.toLowerCase().includes('criar paciente') || message.toLowerCase().includes('novo paciente');
    const containsPatientSearch = message.toLowerCase().includes('buscar paciente') || message.toLowerCase().includes('procurar paciente');
    const containsSalesAnalysis = message.toLowerCase().includes('an√°lise de vendas') || message.toLowerCase().includes('vendas recentes');
    
    // Definir o sistema prompt com base em palavras-chave detectadas
    let systemPrompt = `Voc√™ √© o Endurancy Copilot, um assistente de IA para a plataforma Endurancy de gest√£o de organiza√ß√µes m√©dicas e associa√ß√µes.
    
    Diretivas importantes:
    - Seja conciso e direto em suas respostas.
    - Responda sempre em portugu√™s do Brasil.
    - Voc√™ √© experiente em todos os m√≥dulos da plataforma: Financeiro, Administrativo, Estoque, Vendas, ComplyPay, Importa√ß√£o, Cultivo, Transpar√™ncia, etc.
    - Voc√™ pode ajudar com fluxos de trabalho, navega√ß√£o, recursos dispon√≠veis e boas pr√°ticas.
    - N√£o invente recursos que n√£o existem na plataforma.
    - N√£o forne√ßa aconselhamento m√©dico, jur√≠dico ou financeiro espec√≠fico.
    - Evite respostas muito longas, preferindo uma abordagem direta e pr√°tica.
    
    Contexto do usu√°rio:
    - Organiza√ß√£o ID: ${userContext.organizationId}
    - Nome de usu√°rio: ${userContext.username}
    - Papel: ${userContext.role}
    
    Responda de forma √∫til e profissional.`;
    
    // Adicionar contexto espec√≠fico com base em palavras-chave
    if (containsPatientCreate) {
      systemPrompt += `\n\nO usu√°rio est√° interessado em criar um novo paciente. Explique detalhadamente o processo, incluindo:
      1. Onde encontrar o formul√°rio de cadastro de pacientes
      2. Quais campos s√£o obrigat√≥rios
      3. Como adicionar informa√ß√µes m√©dicas e documentos
      4. Como finalizar o cadastro`;
    } else if (containsPatientSearch) {
      systemPrompt += `\n\nO usu√°rio quer buscar informa√ß√µes sobre pacientes. Explique:
      1. Os diferentes m√©todos de busca dispon√≠veis (nome, CPF, ID)
      2. Onde encontrar a funcionalidade de busca no sistema
      3. Como filtrar os resultados
      4. Como acessar o prontu√°rio completo`;
    } else if (containsSalesAnalysis) {
      systemPrompt += `\n\nO usu√°rio est√° interessado em an√°lise de vendas. Forne√ßa:
      1. Uma vis√£o geral das m√©tricas chave de vendas
      2. Como interpretar os gr√°ficos de desempenho
      3. Onde encontrar relat√≥rios detalhados
      4. Sugest√µes para melhorar o desempenho com base nos dados`;
    }
    
    // Chamada √† API do OpenAI
    try {
      console.log("Iniciando chamada para a API do OpenAI...");
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4o", // o modelo mais recente da OpenAI
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        max_tokens: 500,
        temperature: 0.7,
      });
      
      console.log("Resposta do OpenAI recebida com sucesso");
      
      if (completion && completion.choices && completion.choices.length > 0 && completion.choices[0].message) {
        const responseText = completion.choices[0].message.content || 
          "Desculpe, n√£o consegui processar sua solicita√ß√£o no momento.";
          
        console.log(`Enviando resposta: "${responseText.substring(0, 50)}${responseText.length > 50 ? '...' : ''}"`);
        
        return res.json({ 
          success: true,
          response: responseText 
        });
      } else {
        console.error("Resposta da OpenAI n√£o cont√©m choices ou mensagem v√°lida:", completion);
        return res.json({ 
          success: false,
          response: "Desculpe, ocorreu um erro ao processar sua solicita√ß√£o." 
        });
      }
    } catch (openaiError) {
      logDetailedError("ERRO API OPENAI", openaiError);
      return res.json({ 
        success: false,
        response: "O servi√ßo de IA est√° temporariamente indispon√≠vel. Por favor, tente novamente mais tarde." 
      });
    }
  } catch (error) {
    logDetailedError('ERRO GERAL NA API DE CHAT', error);
    return res.status(500).json({ 
      success: false,
      message: 'Erro ao processar resposta do assistente',
      response: "Ocorreu um erro inesperado. Por favor, tente novamente mais tarde."
    });
  }
});

export default router;